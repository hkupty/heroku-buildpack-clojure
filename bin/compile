#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BPLOG_PREFIX="buildpack.clojure"

# parse args
export BUILD_DIR=$1
export CACHE_DIR=$2
export ENV_DIR=$3

BP_DIR=$(cd $(dirname $0)/..; pwd)
BIN_DIR=$BP_DIR/bin
LIB_DIR=$BP_DIR/lib

source $LIB_DIR/common.sh
source <(curl --retry 3 -fsSL $BUILDPACK_STDLIB_URL)

export_env $ENV_DIR "." "JAVA_OPTS"

# Install JDK from jvm-common
install_jdk ${BUILD_DIR}

# Install Node.js if needed
detect_and_install_nodejs ${BUILD_DIR}

CLJ_VERISON="1.9.0"
CLJ_TOOL_VERSION="394"
CLJ_TGZ="clojure-tools-${CLJ_VERSION}.${CLJ_TOOL_VERSION}.tar.gz"
CLJ_URL="https://download.clojure.org/install/clojure-tools-${CLJ_VERSION}.${CLJ_TOOL_VERSION}.tar.gz"
CLJ_CACHE="$CACHE_DIR/$CLJ_TGZ"
CLJ_INSTALL="$BUILD_DIR/.clj/"

echo "-----> Installing clojure"

mkdir -p $(dirname $CLJ_CACHE)
curl --retry 3 --silent --show-error --max-time 60 -L -o $CLJ_CACHE $CLJ_URL

mkdir -p $CLJ_INSTALL
tar xzf $CLJ_CACHE

$CLJ_CACHE/install.sh $CLJ_INSTALL

# unpack existing cache
CACHED_DIRS=".m2 node_modules"
for DIR in $CACHED_DIRS; do
  if [ ! -d $BUILD_DIR/$DIR ]; then
    cache_copy $DIR $CACHE_DIR $BUILD_DIR
  fi
done

echo "-----> Building with clojure"

# extract environment
if [ -d "$ENV_DIR" ]; then
    # if BUILD_CONFIG_WHITELIST is set, read it to know which configs to export
    if [ -r $ENV_DIR/BUILD_CONFIG_WHITELIST ]; then
        for e in $(cat $ENV_DIR/BUILD_CONFIG_WHITELIST); do
            export "$e=$(cat $ENV_DIR/$e)"
        done
    fi
fi

# Calculate build command
if [ "$BUILD_COMMAND" = "" ]; then
    if [ -x $BUILD_DIR/bin/build ]; then
        echo "       Found bin/build; running it instead of default clojure invocation."
        BUILD_COMMAND=bin/build
    else
        BUILD_COMMAND="clojure $CLJ_BUILD_TASK"
    fi
fi

echo "       Running: $BUILD_COMMAND"

cd $BUILD_DIR
PATH="$CLJ_INSTALL/bin":$PATH JVM_OPTS="-Xmx600m" \
  $BUILD_COMMAND 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build."
  exit 1
fi

# populate profile.d
PROFILE_PATH="$BUILD_DIR/.profile.d/clojure.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$HOME/.heroku/nodejs/bin:$HOME/.jdk/bin:$HOME/.clj/bin:$PATH"' >> $PROFILE_PATH
echo 'export RING_ENV="${RING_ENV:-production}"' >> $PROFILE_PATH

# repack cache with new assets
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done
